package com.datastax.oss.driver.mapper.model.inventory;

import com.datastax.oss.driver.api.core.CqlIdentifier;
import com.datastax.oss.driver.api.core.data.GettableByName;
import com.datastax.oss.driver.api.core.data.SettableByName;
import com.datastax.oss.driver.api.mapper.entity.EntityHelper;
import com.datastax.oss.driver.api.querybuilder.BuildableQuery;
import com.datastax.oss.driver.api.querybuilder.QueryBuilder;
import com.datastax.oss.driver.api.querybuilder.insert.InsertInto;
import com.datastax.oss.driver.internal.mapper.MapperContext;
import java.lang.Override;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
public class DimensionsHelper__MapperGenerated implements EntityHelper<Dimensions> {
  private static final CqlIdentifier DEFAULT_TABLE_ID = CqlIdentifier.fromCql("dimensions");

  private final MapperContext context;

  public DimensionsHelper__MapperGenerated(MapperContext context) {
    this.context = context;
  }

  @Override
  public <SettableT extends SettableByName<SettableT>> SettableT set(Dimensions entity,
      SettableT target) {
    // length:
    target = target.setInt("length", entity.getLength());
    // width:
    target = target.setInt("width", entity.getWidth());
    // height:
    target = target.setInt("height", entity.getHeight());

    return target;
  }

  @Override
  public Dimensions get(GettableByName source) {
    Dimensions returnValue = new Dimensions();
    // length:
    returnValue.setLength(source.getInt("length"));
    // width:
    returnValue.setWidth(source.getInt("width"));
    // height:
    returnValue.setHeight(source.getInt("height"));
    return returnValue;
  }

  @Override
  public BuildableQuery insert() {
    CqlIdentifier keyspaceId = context.getKeyspaceId();
    CqlIdentifier tableId = context.getTableId();
    if (tableId == null) {
      tableId = DEFAULT_TABLE_ID;
    }
    InsertInto insertInto = (keyspaceId == null)
        ? QueryBuilder.insertInto(tableId)
        : QueryBuilder.insertInto(keyspaceId, tableId);
    return insertInto
        .value("length", QueryBuilder.bindMarker("length"))
        .value("width", QueryBuilder.bindMarker("width"))
        .value("height", QueryBuilder.bindMarker("height"));
  }
}

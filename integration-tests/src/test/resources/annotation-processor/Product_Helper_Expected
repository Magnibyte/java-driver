package com.datastax.oss.driver.mapper.model.inventory;

import com.datastax.oss.driver.api.core.CqlIdentifier;
import com.datastax.oss.driver.api.core.data.GettableByName;
import com.datastax.oss.driver.api.core.data.SettableByName;
import com.datastax.oss.driver.api.core.data.UdtValue;
import com.datastax.oss.driver.api.core.type.UserDefinedType;
import com.datastax.oss.driver.api.mapper.entity.EntityHelper;
import com.datastax.oss.driver.api.querybuilder.BuildableQuery;
import com.datastax.oss.driver.api.querybuilder.QueryBuilder;
import com.datastax.oss.driver.api.querybuilder.insert.InsertInto;
import com.datastax.oss.driver.internal.mapper.MapperContext;
import java.lang.Override;
import java.lang.String;
import java.util.UUID;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
public class ProductHelper__MapperGenerated implements EntityHelper<Product> {
  private static final CqlIdentifier DEFAULT_TABLE_ID = CqlIdentifier.fromCql("product");

  private final MapperContext context;

  private final DimensionsHelper__MapperGenerated dimensionsHelper;

  public ProductHelper__MapperGenerated(MapperContext context) {
    this.context = context;
    this.dimensionsHelper = new DimensionsHelper__MapperGenerated(context);
  }

  @Override
  public <SettableT extends SettableByName<SettableT>> SettableT set(Product entity,
      SettableT target) {
    // description:
    target = target.set("description", entity.getDescription(), String.class);
    // id:
    target = target.set("id", entity.getId(), UUID.class);
    // dimensions:
    Dimensions value = entity.getDimensions();
    if (value != null) {
      UserDefinedType udtType = (UserDefinedType) target.getType("dimensions");
      UdtValue udtValue = udtType.newValue();
      dimensionsHelper.set(value, udtValue);
      target = target.setUdtValue("dimensions", udtValue);
    }

    return target;
  }

  @Override
  public Product get(GettableByName source) {
    Product returnValue = new Product();
    // description:
    returnValue.setDescription(source.get("description", String.class));
    // id:
    returnValue.setId(source.get("id", UUID.class));
    // dimensions:
    UdtValue udtValue1 = source.getUdtValue("dimensions");
    if (udtValue1 != null) {
      Dimensions value1 = dimensionsHelper.get(udtValue1);
      returnValue.setDimensions(value1);
    }
    return returnValue;
  }

  @Override
  public BuildableQuery insert() {
    CqlIdentifier keyspaceId = context.getKeyspaceId();
    CqlIdentifier tableId = context.getTableId();
    if (tableId == null) {
      tableId = DEFAULT_TABLE_ID;
    }
    InsertInto insertInto = (keyspaceId == null)
        ? QueryBuilder.insertInto(tableId)
        : QueryBuilder.insertInto(keyspaceId, tableId);
    return insertInto
        .value("description", QueryBuilder.bindMarker("description"))
        .value("id", QueryBuilder.bindMarker("id"))
        .value("dimensions", QueryBuilder.bindMarker("dimensions"));
  }
}

/*
 * Copyright DataStax, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datastax.oss.driver.internal.mapper.processor;

import com.datastax.oss.driver.api.core.session.Session;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import java.io.IOException;
import java.io.Writer;
import javax.annotation.processing.Filer;
import javax.tools.JavaFileObject;

/**
 * Handles the generation of a particular class or interface created by the processor.
 *
 * <p>There can be multiple ones for a single annotated element.
 */
public abstract class ClassGenerator {

  /** A generic warning that can get added to the javadoc of any generated type. */
  public static final String JAVADOC_GENERATED_WARNING =
      "Generated by the DataStax driver mapper, do not edit directly.\n";

  public static final String JAVADOC_PARAGRAPH_SEPARATOR = "\n\n<p>";

  public static final ClassName SESSION_TYPE = ClassName.get(Session.class);

  public void generate(Filer filer) throws IOException {
    ClassName className = getClassName();
    JavaFileObject file =
        filer.createSourceFile(className.packageName() + "." + className.simpleName());
    try (Writer writer = file.openWriter()) {
      getContents().indent("  ").build().writeTo(writer);
    }
  }

  protected abstract ClassName getClassName();

  protected abstract JavaFile.Builder getContents();
}

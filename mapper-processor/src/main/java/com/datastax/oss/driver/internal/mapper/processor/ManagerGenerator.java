/*
 * Copyright DataStax, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datastax.oss.driver.internal.mapper.processor;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import java.io.IOException;
import java.io.Writer;
import javax.annotation.processing.Filer;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;

public class ManagerGenerator {

  private final TypeElement baseElement;
  private final String packageName;
  private final String baseName;

  public ManagerGenerator(TypeElement baseElement) {
    this.baseElement = baseElement;
    String qualifiedName = baseElement.getQualifiedName().toString();
    int i = qualifiedName.lastIndexOf('.');
    this.packageName = qualifiedName.substring(0, i);
    this.baseName = qualifiedName.substring(i + 1);
  }

  public void generate(Filer filer) throws IOException {
    String implementationName = baseName + "_Impl";
    TypeSpec implementationSpec =
        TypeSpec.classBuilder(implementationName)
            .addJavadoc("Generated by the DataStax driver mapper, do not edit directly.\n")
            .addModifiers(Modifier.PUBLIC)
            .addSuperinterface(ClassName.get(packageName, baseName))
            .build();
    JavaFileObject file = filer.createSourceFile(implementationName);
    try (Writer writer = file.openWriter()) {
      JavaFile.builder(packageName, implementationSpec).indent("  ").build().writeTo(writer);
    }
  }
}
